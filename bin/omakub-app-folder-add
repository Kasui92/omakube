#!/bin/bash

# omakub-app-folder-add: Move a .desktop file to a specified app folder.
# Usage: omakub-app-folder-add <desktop_file.desktop> <folder_name>

DESKTOP_DIR="$HOME/.local/share/applications"

if [ "$#" -ne 2 ]; then
  echo -e "\e[32mLet's add an app to a folder in the app grid!\n\e[0m"
  DESKTOP_FILE=$(gum input --prompt "Name> " --placeholder "A desktop file app (e.g., Spotify.desktop, no full path!)")
  FOLDER_NAME=$(gum input --prompt "Folder> " --placeholder "The folder name (e.g., Utilities)")
else
  DESKTOP_FILE="$1"
  FOLDER_NAME="$2"
fi

if [[ -z "$DESKTOP_FILE" || -z "$FOLDER_NAME" ]]; then
  echo "You must set app name and folder name!"
  exit 1
fi

if [ ! -f "$DESKTOP_DIR/$DESKTOP_FILE" ]; then
  echo "Desktop file '$DESKTOP_FILE' not found!"
  exit 1
fi

# Get current folders list
CURRENT_FOLDERS=$(gsettings get org.gnome.desktop.app-folders folder-children)

# Convert to different formats for checking
FOLDER_LOWERCASE=$(echo "$FOLDER_NAME" | tr -d ' ' | tr '[:upper:]' '[:lower:]')
FOLDER_CAMELCASE=$(echo "$FOLDER_NAME" | tr -d ' ')

# Check if folder exists (try exact name, camelcase, then lowercase)
EXISTING_FOLDER=""
if [[ "$CURRENT_FOLDERS" == *"'$FOLDER_NAME'"* ]]; then
  # Exact name match - use original name for schema
  EXISTING_FOLDER="$FOLDER_NAME"
  FOLDER="$FOLDER_NAME"
elif [[ "$CURRENT_FOLDERS" == *"'$FOLDER_CAMELCASE'"* ]]; then
  # CamelCase match (like "WebApps") - use camelcase for schema
  EXISTING_FOLDER="$FOLDER_CAMELCASE"
  FOLDER="$FOLDER_CAMELCASE"
elif [[ "$CURRENT_FOLDERS" == *"'$FOLDER_LOWERCASE'"* ]]; then
  # Lowercase match - use lowercase for schema
  EXISTING_FOLDER="$FOLDER_LOWERCASE"
  FOLDER="$FOLDER_LOWERCASE"
else
  # No existing folder - will create new one with lowercase schema
  FOLDER="$FOLDER_LOWERCASE"
fi

# Set schema and display name based on whether folder exists
if [ -n "$EXISTING_FOLDER" ]; then
  # Use existing folder
  SCHEMA="org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/$FOLDER/"
  FOLDER_DISPLAY_NAME=$(gsettings get "$SCHEMA" name | sed 's/^.\(.*\).$/\1/')
else
  # Create new folder
  SCHEMA="org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/$FOLDER/"
  FOLDER_DISPLAY_NAME="$FOLDER_NAME"
fi

# Check if we need to create a new folder
if [ -z "$EXISTING_FOLDER" ]; then
  # Create new folder
  TRIMMED_FOLDERS=$(echo "$CURRENT_FOLDERS" | sed "s/^\[//;s/\]$//")

  if [ -n "$TRIMMED_FOLDERS" ]; then
    gsettings set org.gnome.desktop.app-folders folder-children "[$TRIMMED_FOLDERS, '$FOLDER']"
  else
    gsettings set org.gnome.desktop.app-folders folder-children "['$FOLDER']"
  fi

  gsettings set "$SCHEMA" name "$FOLDER_DISPLAY_NAME"
  gsettings set "$SCHEMA" apps "['$DESKTOP_FILE']"
else
  # Add app to existing folder
  CURRENT_APPS=$(gsettings get "$SCHEMA" apps)

  if [[ "$CURRENT_APPS" != *"$DESKTOP_FILE"* ]]; then
    TRIMMED=$(echo "$CURRENT_APPS" | sed "s/^\[//;s/\]$//")
    if [ -n "$TRIMMED" ]; then
      gsettings set "$SCHEMA" apps "[$TRIMMED, '$DESKTOP_FILE']"
    else
      gsettings set "$SCHEMA" apps "['$DESKTOP_FILE']"
    fi
  fi
fi