# Omarell Plymouth Theme Script - Boot loading only

Window.SetBackgroundTopColor(0.34, 0.30, 0.34);
Window.SetBackgroundBottomColor(0.34, 0.30, 0.34);

logo.image = Image("logo.png");
logo.sprite = Sprite(logo.image);
logo.sprite.SetX (Window.GetWidth()  / 2 - logo.image.GetWidth()  / 2);
logo.sprite.SetY (Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
logo.sprite.SetOpacity (1);

# Progress bar animation variables
global.fake_progress = 0.0;
global.real_progress = 0.0;
global.fake_progress_active = 0;
global.animation_frame = 0;
global.max_progress = 0.0;

# Use these to adjust the progress bar timing
global.fake_progress_limit = 0.7;
global.fake_progress_duration = 15.0;

fun refresh_callback ()
  {
    global.animation_frame++;

    # Animate fake progress to limit over time with easing
    if (global.fake_progress_active == 1)
      {
        # Calculate elapsed time since start
        elapsed_time = global.animation_frame / 50.0;  # Convert frames to seconds (50 FPS)

        # Calculate linear progress ratio (0 to 1) based on time
        time_ratio = elapsed_time / global.fake_progress_duration;
        if (time_ratio > 1.0)
          time_ratio = 1.0;

        # Apply easing curve: ease-out quadratic
        eased_ratio = 1 - ((1 - time_ratio) * (1 - time_ratio));

        # Calculate fake progress based on eased ratio
        global.fake_progress = eased_ratio * global.fake_progress_limit;

        # Update progress bar with fake progress
        update_progress_bar(global.fake_progress);
      }
  }

Plymouth.SetRefreshFunction (refresh_callback);

#----------------------------------------- Helper Functions --------------------------------

fun update_progress_bar(progress)
  {
    # Only update if progress is moving forward
    if (progress > global.max_progress)
      {
        global.max_progress = progress;
        width = Math.Int(progress_bar.original_image.GetWidth() * progress);
        if (width < 1) width = 1;

        progress_bar.image = progress_bar.original_image.Scale(width, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage(progress_bar.image);
      }
  }

fun show_progress_bar()
  {
    progress_box.sprite.SetOpacity(1);
    progress_bar.sprite.SetOpacity(1);
  }

fun start_fake_progress()
  {
    if (global.max_progress == 0.0)
      {
        global.fake_progress = 0.0;
        global.real_progress = 0.0;
        update_progress_bar(0.0);
      }
    global.fake_progress_active = 1;
    global.animation_frame = 0;
  }

fun stop_fake_progress()
  {
    global.fake_progress_active = 0;
  }

#----------------------------------------- Display Functions --------------------------------

fun display_normal_callback ()
  {
    # Show progress bar immediately for boot/resume modes
    mode = Plymouth.GetMode();
    if (mode == "boot" || mode == "resume")
      {
        show_progress_bar();
        start_fake_progress();
      }
  }

# No password dialog - we go straight to GDM
fun display_password_callback (prompt, bullets)
  {
    # Do nothing - let GDM handle authentication
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);

#----------------------------------------- Progress Bar --------------------------------

progress_box.image = Image("progress_box.png");
progress_box.sprite = Sprite(progress_box.image);

progress_box.x = Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
progress_box.y = logo.sprite.GetY() + logo.image.GetHeight() + 40;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);
progress_box.sprite.SetOpacity(0);

progress_bar.original_image = Image("progress_bar.png");
progress_bar.sprite = Sprite();
progress_bar.image = progress_bar.original_image.Scale(1, progress_bar.original_image.GetHeight());

progress_bar.x = Window.GetWidth() / 2 - progress_bar.original_image.GetWidth() / 2;
progress_bar.y = progress_box.y + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);
progress_bar.sprite.SetOpacity(0);

fun progress_callback (duration, progress)
  {
    global.real_progress = progress;

    # If real progress is above limit, stop fake progress and use real progress
    if (progress > global.fake_progress_limit)
      {
        stop_fake_progress();
        update_progress_bar(progress);
      }
  }

Plymouth.SetBootProgressFunction(progress_callback);

#----------------------------------------- Quit --------------------------------

fun quit_callback ()
{
  # Keep logo visible until GDM takes over
  logo.sprite.SetOpacity (1);
}

Plymouth.SetQuitFunction(quit_callback);

#----------------------------------------- Message --------------------------------

message_sprite = Sprite();
message_sprite.SetPosition(10, 10, 10000);

fun display_message_callback (text)
{
  # Show messages in white text at top-left
  my_image = Image.Text(text, 1, 1, 1);
  message_sprite.SetImage(my_image);
  message_sprite.SetOpacity(1);
}

fun hide_message_callback (text)
{
  message_sprite.SetOpacity(0);
}

Plymouth.SetDisplayMessageFunction (display_message_callback);
Plymouth.SetHideMessageFunction (hide_message_callback);
